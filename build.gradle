plugins {
    id 'java'
    id 'maven-publish'
    id 'net.minecrell.licenser' version '0.4.1'
    id 'com.github.sherter.google-java-format' version '0.8'
}

apply plugin: 'java'
apply plugin: 'com.github.sherter.google-java-format'

googleJavaFormat {
    toolVersion '1.7'
}

repositories {
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot:2.3.1.RELEASE'
    implementation 'org.springframework.boot:spring-boot-autoconfigure:2.3.1.RELEASE'
    implementation 'io.temporal:temporal-sdk:0.26.0'
    
	implementation 'org.springframework.boot:spring-boot-starter-test:2.3.1.RELEASE'
    implementation 'org.springframework:spring-aspects:5.2.7.RELEASE'
    compileOnly 'org.projectlombok:lombok:1.18.12'
	annotationProcessor 'org.projectlombok:lombok:1.18.12'
	
    testCompileOnly 'org.projectlombok:lombok:1.18.12'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
}

group = 'ai.applica'
version = '0.0.1-SNAPSHOT'
java {
    sourceCompatibility = JavaVersion.VERSION_1_9
    targetCompatibility = JavaVersion.VERSION_1_9
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

compileJava {
    dependsOn 'googleJavaFormat'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task execute(type: JavaExec) {
    main = findProperty("mainClass") ?: ""
    classpath = sourceSets.main.runtimeClasspath
}

license {
    header rootProject.file('license-header.txt')
    matching(includes:['**/ai/applica/spring/boot/starter/temporal/samples/**']) {
        header = file('license-header-temporal.txt')
    }
}